{
	"name": "EducationLevelWithSampleSize",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkPool01",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b819e3d4-093b-4468-8b74-949b401e4021"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/33b0df95-be77-4791-89e3-a10226e5b46d/resourceGroups/bigdata-rg/providers/Microsoft.Synapse/workspaces/bigsynapsews01/bigDataPools/SparkPool01",
				"name": "SparkPool01",
				"type": "Spark",
				"endpoint": "https://bigsynapsews01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkPool01",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"# Robust Analysis with Error Handling\n",
					"import pandas as pd\n",
					"import numpy as np\n",
					"import matplotlib.pyplot as plt\n",
					"import seaborn as sns\n",
					"from scipy.stats import ttest_ind\n",
					"\n",
					"# 1. Load and Clean Data\n",
					"file_path = 'abfss://bigdata-project@nutritionedudatalake.dfs.core.windows.net/raw/nutrition_data/Nutrition__Physical_Activity__and_Obesity_-_Behavioral_Risk_Factor_Surveillance_System.csv'\n",
					"try:\n",
					"    df = pd.read_csv(file_path)\n",
					"    \n",
					"    # Apply filters with data validation\n",
					"    nutrition_df = df[\n",
					"        (df['Class'] == 'Fruits and Vegetables') & \n",
					"        (df['StratificationCategory1'] == 'Education') &\n",
					"        (df['Question'].str.contains('less than one time daily', case=False, na=False))\n",
					"    ].copy()\n",
					"    \n",
					"    # Convert to numeric and drop invalid\n",
					"    nutrition_df['Data_Value'] = pd.to_numeric(nutrition_df['Data_Value'], errors='coerce')\n",
					"    nutrition_df['Sample_Size'] = pd.to_numeric(nutrition_df['Sample_Size'], errors='coerce')\n",
					"    nutrition_df.dropna(subset=['Data_Value', 'Sample_Size', 'Stratification1'], inplace=True)\n",
					"    \n",
					"    if nutrition_df.empty:\n",
					"        raise ValueError(\"No valid data after filtering!\")\n",
					"\n",
					"    # 2. Weighted Averages\n",
					"    def weighted_avg(group):\n",
					"        vals = group['Data_Value']\n",
					"        weights = group['Sample_Size']\n",
					"        return np.average(vals, weights=weights)\n",
					"    \n",
					"    summary = nutrition_df.groupby('Stratification1').apply(weighted_avg) \\\n",
					"                         .reset_index(name='Weighted Avg %') \\\n",
					"                         .sort_values('Weighted Avg %', ascending=False)\n",
					"\n",
					"    # 3. Statistical Testing\n",
					"    groups = {\n",
					"        level: nutrition_df[nutrition_df['Stratification1'] == level]['Data_Value'] \n",
					"        for level in summary['Stratification1']\n",
					"    }\n",
					"    \n",
					"    if len(groups) >= 2:\n",
					"        t_stat, p_value = ttest_ind(list(groups.values())[0], list(groups.values())[-1])\n",
					"        sig_flag = f\"✅ (p = {p_value:.4f})\" if p_value < 0.05 else f\"❌ (p = {p_value:.4f})\"\n",
					"    else:\n",
					"        raise ValueError(\"Insufficient groups for comparison\")\n",
					"\n",
					"    # 4. Visualization (Fixed Seaborn Warning)\n",
					"    plt.figure(figsize=(10, 6))\n",
					"    ax = sns.barplot(\n",
					"        data=summary,\n",
					"        x='Weighted Avg %',\n",
					"        y='Stratification1',\n",
					"        hue='Stratification1',  # Fixes palette warning\n",
					"        palette='RdYlGn_r',\n",
					"        legend=False\n",
					"    )\n",
					"    \n",
					"    # Add value labels\n",
					"    for i, val in enumerate(summary['Weighted Avg %']):\n",
					"        ax.text(val + 1, i, f\"{val:.1f}%\", va='center')\n",
					"\n",
					"    plt.title('Low Fruit/Vegetable Consumption by Education Level\\n(Weighted by Sample Size | ▼ = Better)')\n",
					"    plt.xlabel('% Reporting <1x Daily Consumption')\n",
					"    plt.ylabel('Education Level')\n",
					"    plt.tight_layout()\n",
					"    plt.show()\n",
					"\n",
					"    # 5. Key Metrics\n",
					"    national_avg = weighted_avg(nutrition_df)\n",
					"    print(\"🔍 Valid Groups:\", summary['Stratification1'].tolist())\n",
					"    print(f\"📊 National Average: {national_avg:.1f}%\")\n",
					"    print(f\"⚠️ Worst Group: {summary.iloc[0]['Stratification1']} ({summary.iloc[0]['Weighted Avg %']:.1f}%)\")\n",
					"    print(f\"✅ Best Group: {summary.iloc[-1]['Stratification1']} ({summary.iloc[-1]['Weighted Avg %']:.1f}%)\")\n",
					"    print(f\"📉 Gap: {summary.iloc[0]['Weighted Avg %'] - summary.iloc[-1]['Weighted Avg %']:.1f} pp\")\n",
					"    print(f\"🧪 Significance: {sig_flag}\")\n",
					"\n",
					"except Exception as e:\n",
					"    print(f\"🚨 Error: {str(e)}\")\n",
					"    print(\"💡 Debug Tips:\")\n",
					"    print(\"- Check if 'StratificationCategory1' contains 'Education' values\")\n",
					"    print(\"- Verify numeric columns don't contain non-numeric values\")\n",
					"    print(\"- Ensure sample sizes > 0 for weighted calculations\")"
				],
				"execution_count": 3
			}
		]
	}
}